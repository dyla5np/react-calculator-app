{"version":3,"sources":["components/Button.js","components/Input.js","components/ClearButton.js","App.js","serviceWorker.js","index.js"],"names":["Button","isOperator","val","isNaN","className","this","props","children","onClick","handleClick","React","Component","Input","ClearButton","App","addToInput","setState","input","state","addZeroToInput","addDecimal","indexOf","clear","add","previousNumber","operator","subtraction","multiplication","divide","evaluate","currentNumber","parseInt","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c05f5b6c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.css\";\n\nclass Button extends React.Component {\n  /* return value if value is not number */\n  isOperator = val => {\n    return !isNaN(val) || val === \".\" || val === \"=\";\n  };\n\n  render() {\n    return (\n      <div\n        className={`button ${\n          this.isOperator(this.props.children) ? \"\" : \"operator\"\n        }`}\n        onClick={() => this.props.handleClick(this.props.children)}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default Button;\n","import React from \"react\";\nimport \"./Input.css\";\n\nclass Input extends React.Component {\n  render() {\n    return <div className=\"input\">{this.props.children}</div>;\n  }\n}\n\nexport default Input;\n","import React from \"react\";\nimport \"./ClearButton.css\";\n\nclass ClearButton extends React.Component {\n  render() {\n    return (\n      <div\n        className=\"clear-btn\"\n        onClick={() => this.props.handleClick(this.props.children)}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default ClearButton;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Button from \"./components/Button\";\nimport Input from \"./components/Input\";\nimport ClearButton from \"./components/ClearButton\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      previousNumber: \"\",\n      currentNumber: \"\",\n      operator: \"\"\n    };\n  }\n\n  addToInput = val => {\n    this.setState({\n      input: this.state.input + val\n    });\n  };\n\n  addZeroToInput = val => {\n    //if this.state.input is not empty then add zero\n    if (this.state.input !== \"\") {\n      this.setState({\n        input: this.state.input + val\n      });\n    }\n  };\n\n  addDecimal = val => {\n    //only add decimal if there is no current decimal present\n    if (this.state.input.indexOf(\".\") === -1) {\n      this.setState({\n        input: this.state.input + val\n      });\n    }\n  };\n\n  clear = val => {\n    this.setState({\n      input: \"\"\n    });\n  };\n\n  add = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({\n      input: \"\"\n    });\n    this.state.operator = \"plus\";\n  };\n\n  subtraction = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({\n      input: \"\"\n    });\n    this.state.operator = \"subtraction\";\n  };\n\n  multiplication = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({\n      input: \"\"\n    });\n    this.state.operator = \"multiplication\";\n  };\n\n  divide = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({\n      input: \"\"\n    });\n    this.state.operator = \"divide\";\n  };\n\n  evaluate = () => {\n    this.state.currentNumber = this.state.input;\n\n    if (this.state.operator === \"plus\") {\n      this.setState({\n        input:\n          parseInt(this.state.previousNumber) +\n          parseInt(this.state.currentNumber)\n      });\n    } else if (this.state.operator === \"subtraction\") {\n      this.setState({\n        input:\n          parseInt(this.state.previousNumber) -\n          parseInt(this.state.currentNumber)\n      });\n    } else if (this.state.operator === \"multiplication\") {\n      this.setState({\n        input:\n          parseInt(this.state.previousNumber) *\n          parseInt(this.state.currentNumber)\n      });\n    } else if (this.state.operator === \"divide\") {\n      this.setState({\n        input:\n          parseInt(this.state.previousNumber) /\n          parseInt(this.state.currentNumber)\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"calc-wrapper\">\n          <div className=\"row\">\n            <Input placeholder=\"enter a number\">{this.state.input}</Input>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.divide}>/</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.multiplication}>*</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.add}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addDecimal}>.</Button>\n            <Button handleClick={this.addZeroToInput}>0</Button>\n            <Button handleClick={this.evaluate}>=</Button>\n            <Button handleClick={this.subtraction}>-</Button>\n          </div>\n          <div className=\"row\">\n            <ClearButton handleClick={this.clear}>Clear</ClearButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}